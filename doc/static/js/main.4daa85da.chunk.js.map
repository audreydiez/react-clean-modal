{"version":3,"sources":["lib/icon_close.svg","lib/ReactCustomModal.jsx","lib/useModal.jsx","App.js","index.js"],"names":["ReactCustomModal","hide","isVisible","customClass","closeOnOverlayClick","closeOnScroll","animations","closeOnTop","ariaLabelledBy","testId","customFooter","customFooterAlign","props","useState","animationsOnClose","setAnimationsOnClose","modalOptions","join","closeModalEvent","e","console","log","key","setTimeout","useEffect","window","addEventListener","removeEventListener","ReactDOM","createPortal","className","onClick","undefined","role","stopPropagation","children","src","iconClose","alt","arrayOfBtn","map","btn","push","React","createElement","eventHandling","text","createCustomFooter","document","body","useModal","isShowing","setIsShowing","toggle","App","showClassic","toggleClassic","showOverlay","toggleOverlay","showScroll","toggleScroll","showCloseOnTop","toggleCloseOnTop","showTestId","toggleTestId","showCustomFooter","toggleCustomFooter","alert","style","width","margin","type","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4daa85da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon_close.a9e51754.svg\";","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport './ReactCustomModal.scss'\nimport iconClose from './icon_close.svg'\n\n// Mettre class optionnelles pour custom css\n\nconst ReactCustomModal = ({\n    hide,\n    isVisible,\n    customClass,\n    closeOnOverlayClick = false,\n    closeOnScroll = false,\n    animations = false,\n    closeOnTop = false,\n    ariaLabelledBy,\n    testId,\n    customFooter,\n    customFooterAlign,\n    ...props\n}) => {\n    const [animationsOnClose, setAnimationsOnClose] = useState(false)\n\n    // custom options CSS\n    const modalOptions = [customClass ? customClass : ''].join(' ')\n\n    function closeModalEvent(e) {\n        console.log('a')\n        if (e.key === 'Escape') {\n            if (isVisible && !animations) {\n                hide()\n            }\n            if (isVisible && animations) {\n                setAnimationsOnClose(true)\n                setTimeout(function () {\n                    setAnimationsOnClose(false)\n                    hide()\n                }, 250)\n            }\n        }\n        if (isVisible && !animations) {\n            hide()\n        }\n        if (isVisible && animations) {\n            setAnimationsOnClose(true)\n            setTimeout(function () {\n                setAnimationsOnClose(false)\n                hide()\n            }, 250)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('keyup', (e) => {\n            closeModalEvent(e)\n        })\n\n        if (closeOnScroll) {\n            window.addEventListener('wheel', closeModalEvent)\n        }\n\n        return () => {\n            window.removeEventListener('wheel', closeModalEvent)\n            window.removeEventListener('keyup', closeModalEvent)\n        }\n    }, [isVisible])\n\n    //console.log(customFooter)\n\n    const createCustomFooter = () => {\n        const arrayOfBtn = []\n        customFooter.map((btn, key) => {\n            arrayOfBtn.push(\n                React.createElement(\n                    'button',\n                    {\n                        className: btn.className,\n                        key: key,\n                        onClick: btn.eventHandling ? btn.eventHandling : closeModalEvent\n                    },\n                    btn.text\n                )\n            )\n        })\n        return arrayOfBtn\n    }\n\n    return isVisible\n        ? ReactDOM.createPortal(\n              <div\n                  className={`modal-overlay ${animations ? 'open' : ''} ${\n                      animationsOnClose ? 'close' : ''\n                  }`}\n                  onClick={closeOnOverlayClick ? closeModalEvent : undefined}>\n                  <div\n                      role=\"dialog\"\n                      aria-modal=\"true\"\n                      className={`modal modal-container ${modalOptions}`}\n                      aria-labelledby={ariaLabelledBy}\n                      data-testid={testId}\n                      onClick={(e) => e.stopPropagation()}>\n                      {props.children}\n                      {closeOnTop ? (\n                          <div className=\"modal-close\" onClick={closeModalEvent}>\n                              <img src={iconClose} className=\"modal-close-icon\" alt=\"\" />\n                          </div>\n                      ) : (\n                          ''\n                      )}\n                      {customFooter ? (\n                          <div\n                              className={`modal-footer ${\n                                  customFooterAlign ? customFooterAlign : 'center'\n                              } `}>\n                              {createCustomFooter()}\n                          </div>\n                      ) : (\n                          ''\n                      )}\n                  </div>\n              </div>,\n              document.body\n          )\n        : ''\n}\n\nexport default ReactCustomModal\n","import { useState } from 'react';\n\nconst useModal = () => {\n    const [isShowing, setIsShowing] = useState(false);\n\n    function toggle() {\n        setIsShowing(!isShowing);\n    }\n\n    return {\n        isShowing,\n        toggle,\n    }\n};\n\nexport default useModal;","import './App.scss'\nimport React from 'react'\n\nimport ReactCustomModal from './lib/ReactCustomModal'\nimport useModal from './lib/useModal'\n\nfunction App() {\n    const { isShowing: showClassic, toggle: toggleClassic } = useModal()\n    const { isShowing: showOverlay, toggle: toggleOverlay } = useModal()\n    const { isShowing: showScroll, toggle: toggleScroll } = useModal()\n    const { isShowing: showCloseOnTop, toggle: toggleCloseOnTop } = useModal()\n    const { isShowing: showTestId, toggle: toggleTestId } = useModal()\n    const { isShowing: showCustomFooter, toggle: toggleCustomFooter } = useModal()\n\n    const customEvent = () => {\n        alert('Ah')\n    }\n\n    const arrayOfBtn = [\n        {\n            text: 'Close modal',\n            className: 'btn-clean-modal'\n        },\n        {\n            text: 'Alert me!',\n            className: 'btn-clean-modal',\n            eventHandling: customEvent\n        }\n    ]\n\n    return (\n        <div style={{ width: 640, margin: '15px auto' }}>\n            <h1>Hello React</h1>\n            <button type=\"button\" className=\"btn\" onClick={toggleClassic}>\n                Open me! (classic)\n            </button>\n            <br />\n            <br />\n            <button type=\"button\" className=\"btn\" onClick={toggleOverlay}>\n                Open me! (overlay)\n            </button>\n            <br />\n            <br />\n            <button type=\"button\" className=\"btn\" onClick={toggleScroll}>\n                Open me! (on scroll)\n            </button>\n            <br />\n            <br />\n\n            <button type=\"button\" className=\"btn\" onClick={toggleCloseOnTop}>\n                Open me! (close on top with animation)\n            </button>\n            <br />\n            <br />\n            <button type=\"button\" className=\"btn\" onClick={toggleTestId}>\n                Open me! (testing friendly with aria)\n            </button>\n            <br />\n            <br />\n            <button type=\"button\" className=\"btn\" onClick={toggleCustomFooter}>\n                Open me! (Custom footer buttons with custom event)\n            </button>\n            <br />\n            <br />\n\n            <ReactCustomModal isVisible={showClassic} hide={toggleClassic}>\n                <h1>HAHA</h1>\n                <button type=\"button\" className=\"btn-clean-modal\" onClick={toggleClassic}>\n                    Close\n                </button>\n            </ReactCustomModal>\n\n            <ReactCustomModal\n                isVisible={showOverlay}\n                closeOnOverlayClick={true}\n                hide={toggleOverlay}>\n                <h1>HAHA</h1>\n                <button type=\"button\" className=\"btn-clean-modal\" onClick={toggleOverlay}>\n                    Close\n                </button>\n            </ReactCustomModal>\n\n            <ReactCustomModal\n                isVisible={showScroll}\n                closeOnOverlayClick={true}\n                closeOnScroll={true}\n                hide={toggleScroll}\n                customClass={'custom-modal-class'}>\n                <h1>HAHA</h1>\n                <button type=\"button\" className=\"btn-clean-modal\" onClick={toggleScroll}>\n                    Close\n                </button>\n            </ReactCustomModal>\n\n            <ReactCustomModal\n                isVisible={showCloseOnTop}\n                closeOnTop={true}\n                closeOnOverlayClick={true}\n                closeOnScroll={true}\n                animations={true}\n                hide={toggleCloseOnTop}>\n                <h1>HAHA</h1>\n            </ReactCustomModal>\n\n            <ReactCustomModal\n                isVisible={showTestId}\n                closeOnOverlayClick={true}\n                closeOnScroll={true}\n                hide={toggleTestId}\n                ariaLabelledBy={'dialog1_label'}\n                testId={'modal-test'}>\n                <h1 aria-describedby=\"dialog1_label\">HAHA</h1>\n            </ReactCustomModal>\n\n            <ReactCustomModal\n                isVisible={showCustomFooter}\n                closeOnOverlayClick={true}\n                closeOnScroll={true}\n                hide={toggleCustomFooter}\n                customFooter={arrayOfBtn}\n                customFooterAlign={'left'}>\n                <h1>HAHA</h1>\n            </ReactCustomModal>\n        </div>\n    )\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}